#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "definicoes.h"

#define MATRIX_LED_PIN 7 // PINO DA MATRIZ DE LEDS ws2818b
#define BUZZER_PIN 21 // PINO DO BUZZER
#define BUTTON_PIN_A 5 // PINO DO BOTÃO A
#define BUTTON_PIN_B 6 // PINO DO BOTÃO B
#define GPIO_PIN_RED 13
// Definição da quantidade de LEDs e o pino de controle
#define LED_COUNT 25// Quantidade de LEDs na matriz
#define DEBOUNCE_DELAY 500 // Tempo de debounce em milissegundos
#define DEBOUNCE_DELAY_MS 250 // Tempo de debounce em milissegundos


// Variáveis globais
volatile bool flag_button_a = false;//Sinalizam pressionamento dos botoes
volatile bool flag_button_b = false;//Sinalizam pressionamento dos botoes
volatile uint64_t ultimo_botao_a = 0; //Armazenam o ultimo tempo de pressionamento para debounce
volatile uint64_t ultimo_botao_b = 0; //Armazenam o ultimo tempo de pressionamento para debounce
int contador = 0; // Contador de 0 a 9

// Definição de pixel GRB
// Cada pixel é composto por 3 bytes, um para cada cor 24bits
struct pixel_t{
    uint8_t G,R,B; // Três valores de 8 bits para cada cor
};

// Definição de um tipo de dado para um pixel
typedef struct pixel_t pixel_t;
typedef pixel_t npLED_t; // Mudança de nome para facilitar a leitura

// Buffer de pixels que será enviado para o controlador
npLED_t leds [LED_COUNT]; 


// Função para converter cores em formato RGB para o protocolo da matriz de LEDs
// O protocolo é GRB, ou seja, o primeiro byte é o verde, o segundo é o vermelho e o terceiro é o azul
uint32_t matriz_rgb(uint8_t b, uint8_t r, uint8_t g) {
    unsigned char R, G, B;
    R = (unsigned char)r;
    G = (unsigned char)g;
    B = (unsigned char)b;
    return (G << 24) | (R << 16) | (B << 8);
}

// Variváveis para o controle do PIO
PIO np_pio;
uint sm;

// Inicializa a máquina PIO
void npInit(uint pin){
    // Cria programa PIO
    uint offset = pio_add_program(pio0, &ws2812_program);
    np_pio = pio0;

    // Aloca uma máquina PIO
    sm = pio_claim_unused_sm(np_pio, false);
    if(sm < 0){
        np_pio = pio1;
        sm = pio_claim_unused_sm(np_pio, true); // Se nenhuma máquina estiver disponível, panic
    }

    // Inicializa o programa na máquina PIO
ws2812_program_init(np_pio, sm, offset, pin, 800000, false);

    // Limpa o buffer de LEDs
    for(uint i = 0; i < LED_COUNT; i++){
        leds[i].R = 0;
        leds[i].G = 0;
        leds[i].B = 0;
    }
}

// Função para atribuar uma cor a um LED
void npSetLED(const uint index, const uint8_t r, const uint8_t g, const uint8_t b){
    leds[index].G = g;
    leds[index].R = r;
    leds[index].B = b;
}

// Limpa o buffer de LEDs
void npClear(){
    for(uint i = 0;i < LED_COUNT; i++){
        npSetLED(i, 0, 0, 0);
    }
}
// Escreve o buffer de LEDs no controlador
void npWrite(){
    // Escreve cada dado de 8 bits dos pixels no buffer da máquina PIO
    for (uint i = 0; i < LED_COUNT; i++){
        uint32_t valor_led = matriz_rgb(leds[i].B, leds[i].R, leds[i].G);
        pio_sm_put_blocking(np_pio, sm, valor_led);
    }
    sleep_us(100); // Espera 100us, sinal de RESET do datasheet.
}

// Atribui uma cor a vários LEDs
void npSetManyLEDs(uint *posicaoLEDs, size_t tamanhoVetor, uint8_t r, uint8_t g, uint8_t b) {
    for (uint i = 0; i < tamanhoVetor; i++) {
        uint index = posicaoLEDs[i]; // Obtem o índice do LED
        if (index < LED_COUNT) { // Verifica se o índice está dentro do intervalo válido
            leds[index].R = r;
            leds[index].G = g;
            leds[index].B = b;
        }
    }
}


// --- INTERRUPÇÃO E DEBOUNCE --- //
void gpio_callback(uint gpio, uint32_t events) {
    uint64_t agora = time_us_64() / 1000; // Converte para ms

//Verifica o tempo desde a ultima ativação é maio que o intervalo de debounce_delay_ms
    if (gpio == BUTTON_PIN_A && (agora - ultimo_botao_a) > DEBOUNCE_DELAY_MS) {
        flag_button_a = true;//flag para sinalizar pressionamento do botão a
        ultimo_botao_a = agora; //Atualiza o ultimo tmpo registrado do botao A com tempo atual
    }
    //Verifica o tempo desde a ultima ativação é maio que o intervalo de debounce_delay_ms

    else if (gpio == BUTTON_PIN_B && (agora - ultimo_botao_b) > DEBOUNCE_DELAY_MS) {
        flag_button_b = true;//flag para sinalizar pressionamento do botão b
        ultimo_botao_b = agora; //Atualiza o ultimo tmpo registrado do botao A com tempo atual
    }
    }
//Variaveis globais
volatile uint64_t ultimo_registro = 0; //Armazena o ultimo momento em que o LED foi ligado/desligado
volatile bool led_state = false; //Controla o estado do LED atual

void numero_0(){
    const uint led_sequence[] = {24,23,22,21,20,15,10,5,0,1,2,3,4,9,14,19};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    for (int i = 0; i < led_count; i++) {
        npSetLED(led_sequence[i], 100, 0, 0);
    }
    npWrite();
}
void numero_1(){
    const uint led_sequence[] = {13, 17, 21, 18, 11, 8, 1};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);
    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 0, 0, 100);
        }
    // Envia as mudanças para os LEDs
    npWrite();

}
void numero_2(){
    
    // Define as posições dos LEDs que formarão o quadrado
    const uint led_sequence[] = {24,23,22,21,20,19,10,11,12,13,14,5,4,3,2,1,0};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 0, 100, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_3(){
    
    // Define as posições dos LEDs que formarão o quadrado
    const uint led_sequence[] = {24,23,22,21,20,19,10,11,12,13,14,9,4,3,2,1,0};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 100, 0, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_4(){
    const uint led_sequence[] = {23,21,16,18,13,11,12,8,1};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i],0, 0, 100);
        }
    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_5(){
    const uint led_sequence[] = {24,23,22,21,20,15,14,13,12,11,10,9,4,3,2,1,0};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 0, 100, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_6(){
        const uint led_sequence[] = {24,23,22,21,20,15,14,13,12,11,10,9,0,1,2,3,4,5};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 100, 0, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_7(){
        const uint led_sequence[] = {24,23,22,21,20,19,10,11,12,13,14,9,0};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 0, 0, 100);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_8(){
    const uint led_sequence[] = {24,23,22,21,20,15,14,13,12,11,10,9,5,4,3,2,1,0,19};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);

    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 0, 100, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}
void numero_9(){
        const uint led_sequence[] = {24,23,22,21,20,19,10,11,12,13,14,15,9,0,1,2,3,4};
    const uint led_count = sizeof(led_sequence) / sizeof(led_sequence[0]);


    // Acende os LEDs na sequência definida
    for (int i = 0; i < led_count; i++) {
            // Caso contrário, acende com cor vermelha
            npSetLED(led_sequence[i], 100, 0, 0);
        }
    

    // Envia as mudanças para os LEDs
    npWrite();
}

// Função chamada quando o botão é pressionado
void mostrar_numero(uint8_t numero) {
    npClear(); // Limpa a matriz antes de mostrar o número
    switch (numero) {
        case 0: numero_0(); break;
        case 1: numero_1(); break;
        case 2: numero_2(); break;
        case 3: numero_3(); break;
        case 4: numero_4(); break;
        case 5: numero_5(); break;
        case 6: numero_6(); break;
        case 7: numero_7(); break;
        case 8: numero_8(); break;
        case 9: numero_9(); break;
    }
    npWrite(); // Atualiza os LEDs
}
// Função chama o led vermelho
void led_vermelho() {
    uint64_t agora = time_us_64(); //Armazena o tempo atual desde a inicialização
    if (agora - ultimo_registro >= 100000) { // 100 ms em μs
        led_state = !led_state;//Alterna o estado do LED a cada 100ms
        gpio_put(GPIO_PIN_RED, led_state); //Altera o estado fisico do pino GPIO
        ultimo_registro = agora;//Atualiza o ultimo registro com o tempo atual, reiniciando a contagem
    }
}

//Função principal
int main() {
    stdio_init_all();
    npInit(MATRIX_LED_PIN);

    // Inicializa e Configura o LED Vermelho 
    gpio_init(GPIO_PIN_RED);
    gpio_set_dir(GPIO_PIN_RED, GPIO_OUT);

    // Inicializa e Configura o Botão A e PUll-Up
    gpio_init(BUTTON_PIN_A);
    gpio_set_dir(BUTTON_PIN_A, GPIO_IN);
    gpio_pull_up(BUTTON_PIN_A);
    gpio_set_irq_enabled_with_callback(BUTTON_PIN_A, GPIO_IRQ_EDGE_FALL, true, &gpio_callback);//    // Configura as interrupções para ambos os botões, usando a mesma callback.
    // Inicializa e Configura o Botão B e PUll-Up
    gpio_init(BUTTON_PIN_B);
    gpio_set_dir(BUTTON_PIN_B, GPIO_IN);
    gpio_pull_up(BUTTON_PIN_B);
    gpio_set_irq_enabled(BUTTON_PIN_B, GPIO_IRQ_EDGE_FALL, true); // Borda de descida apenas

    printf("Sistema iniciado...\n");
    npClear();

    while (true) {
        led_vermelho(); // Acende o LED vermelho

        // Processa botão A
        if (flag_button_a) {
            contador = (contador + 1) % 10;
            printf("Contador: %d\n", contador);
            mostrar_numero(contador);
            flag_button_a = false;
        }

        // Processa botão B
        if (flag_button_b) {
            contador = (contador == 0) ? 9 : contador - 1;
            printf("Contador: %d\n", contador);
            mostrar_numero(contador);
            flag_button_b = false;
        }

        tight_loop_contents();//Otimiza o loop principal
    }
}